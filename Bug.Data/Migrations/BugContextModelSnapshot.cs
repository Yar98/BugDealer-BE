// <auto-generated />
using System;
using Bug.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bug.Data.Migrations
{
    [DbContext(typeof(BugContext))]
    partial class BugContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AccountProject", b =>
                {
                    b.Property<string>("AccountsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountsId", "ProjectsId");

                    b.HasIndex("ProjectsId");

                    b.ToTable("AccountProject");
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<string>("AccountsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountRole");
                });

            modelBuilder.Entity("Bug.Entities.Model.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUri")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Bug.Entities.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Bug.Entities.Model.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IssueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeLog")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("IssueId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Bug.Entities.Model.Issue", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AsigneeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Environment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginEstimateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PriorityId")
                        .HasColumnType("int");

                    b.Property<string>("ProjectId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RemainEstimateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReporterId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeLog")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AsigneeId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ReporterId");

                    b.HasIndex("StatusId");

                    b.ToTable("Issue");
                });

            modelBuilder.Entity("Bug.Entities.Model.Issuelog", b =>
                {
                    b.Property<string>("IssueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ModifierId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PreStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("TimeLog")
                        .HasColumnType("datetime2");

                    b.HasIndex("IssueId");

                    b.HasIndex("ModStatusId");

                    b.HasIndex("ModifierId");

                    b.HasIndex("PreStatusId");

                    b.ToTable("Issuelog");
                });

            modelBuilder.Entity("Bug.Entities.Model.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Label");
                });

            modelBuilder.Entity("Bug.Entities.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permission");
                });

            modelBuilder.Entity("Bug.Entities.Model.Priority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Priority");
                });

            modelBuilder.Entity("Bug.Entities.Model.Project", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkflowId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Bug.Entities.Model.Relation", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromIssueId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("ToIssueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("FromIssueId");

                    b.HasIndex("TagId");

                    b.HasIndex("ToIssueId");

                    b.ToTable("Relation");
                });

            modelBuilder.Entity("Bug.Entities.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Bug.Entities.Model.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Bug.Entities.Model.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Bug.Entities.Model.Transition", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EndStatusId");

                    b.HasIndex("StartStatusId");

                    b.HasIndex("WorkflowId");

                    b.ToTable("Transition");
                });

            modelBuilder.Entity("Bug.Entities.Model.Vote", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AccountId");

                    b.HasIndex("IssueId");

                    b.ToTable("Vote");
                });

            modelBuilder.Entity("Bug.Entities.Model.Watcher", b =>
                {
                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IssueId")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("AccountId");

                    b.HasIndex("IssueId");

                    b.ToTable("Watcher");
                });

            modelBuilder.Entity("Bug.Entities.Model.Workflow", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Workflow");
                });

            modelBuilder.Entity("Bug.Entities.Model.Worklog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LoggerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RemainTime")
                        .HasColumnType("int");

                    b.Property<int>("SpentTime")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoggerId");

                    b.ToTable("Worklog");
                });

            modelBuilder.Entity("IssueTag", b =>
                {
                    b.Property<string>("IssuesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("IssuesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("IssueTag");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");
                });

            modelBuilder.Entity("ProjectRole", b =>
                {
                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProjectsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("ProjectRole");
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.Property<string>("ProjectsId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProjectsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProjectTag");
                });

            modelBuilder.Entity("RoleTransition", b =>
                {
                    b.Property<string>("RolesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TransitionsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolesId", "TransitionsId");

                    b.HasIndex("TransitionsId");

                    b.ToTable("RoleTransition");
                });

            modelBuilder.Entity("StatusTag", b =>
                {
                    b.Property<string>("StatusesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("StatusesId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("StatusTag");
                });

            modelBuilder.Entity("StatusWorkflow", b =>
                {
                    b.Property<string>("StatusesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WorkflowsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("StatusesId", "WorkflowsId");

                    b.HasIndex("WorkflowsId");

                    b.ToTable("StatusWorkflow");
                });

            modelBuilder.Entity("AccountProject", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bug.Entities.Model.Comment", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Bug.Entities.Model.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId");

                    b.Navigation("Account");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Bug.Entities.Model.Issue", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Asignee")
                        .WithMany()
                        .HasForeignKey("AsigneeId");

                    b.HasOne("Bug.Entities.Model.Priority", "Priority")
                        .WithMany()
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("Bug.Entities.Model.Account", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId");

                    b.HasOne("Bug.Entities.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Asignee");

                    b.Navigation("Priority");

                    b.Navigation("Project");

                    b.Navigation("Reporter");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Bug.Entities.Model.Issuelog", b =>
                {
                    b.HasOne("Bug.Entities.Model.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId");

                    b.HasOne("Bug.Entities.Model.Status", "ModStatus")
                        .WithMany()
                        .HasForeignKey("ModStatusId");

                    b.HasOne("Bug.Entities.Model.Account", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");

                    b.HasOne("Bug.Entities.Model.Status", "PreStatus")
                        .WithMany()
                        .HasForeignKey("PreStatusId");

                    b.Navigation("Issue");

                    b.Navigation("Modifier");

                    b.Navigation("ModStatus");

                    b.Navigation("PreStatus");
                });

            modelBuilder.Entity("Bug.Entities.Model.Project", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Creator")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatorId");

                    b.HasOne("Bug.Entities.Model.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.Navigation("Creator");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Bug.Entities.Model.Relation", b =>
                {
                    b.HasOne("Bug.Entities.Model.Issue", "FromIssue")
                        .WithMany()
                        .HasForeignKey("FromIssueId");

                    b.HasOne("Bug.Entities.Model.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Issue", "ToIssue")
                        .WithMany()
                        .HasForeignKey("ToIssueId");

                    b.Navigation("FromIssue");

                    b.Navigation("Tag");

                    b.Navigation("ToIssue");
                });

            modelBuilder.Entity("Bug.Entities.Model.Status", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bug.Entities.Model.Tag", b =>
                {
                    b.HasOne("Bug.Entities.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Bug.Entities.Model.Transition", b =>
                {
                    b.HasOne("Bug.Entities.Model.Status", "EndStatus")
                        .WithMany()
                        .HasForeignKey("EndStatusId");

                    b.HasOne("Bug.Entities.Model.Status", "StartStatus")
                        .WithMany()
                        .HasForeignKey("StartStatusId");

                    b.HasOne("Bug.Entities.Model.Workflow", "Workflow")
                        .WithMany()
                        .HasForeignKey("WorkflowId");

                    b.Navigation("EndStatus");

                    b.Navigation("StartStatus");

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("Bug.Entities.Model.Vote", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Bug.Entities.Model.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId");

                    b.Navigation("Account");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Bug.Entities.Model.Watcher", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("Bug.Entities.Model.Issue", "Issue")
                        .WithMany()
                        .HasForeignKey("IssueId");

                    b.Navigation("Account");

                    b.Navigation("Issue");
                });

            modelBuilder.Entity("Bug.Entities.Model.Workflow", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Bug.Entities.Model.Worklog", b =>
                {
                    b.HasOne("Bug.Entities.Model.Account", "Logger")
                        .WithMany()
                        .HasForeignKey("LoggerId");

                    b.Navigation("Logger");
                });

            modelBuilder.Entity("IssueTag", b =>
                {
                    b.HasOne("Bug.Entities.Model.Issue", null)
                        .WithMany()
                        .HasForeignKey("IssuesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Bug.Entities.Model.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectRole", b =>
                {
                    b.HasOne("Bug.Entities.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectTag", b =>
                {
                    b.HasOne("Bug.Entities.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleTransition", b =>
                {
                    b.HasOne("Bug.Entities.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Transition", null)
                        .WithMany()
                        .HasForeignKey("TransitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StatusTag", b =>
                {
                    b.HasOne("Bug.Entities.Model.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StatusWorkflow", b =>
                {
                    b.HasOne("Bug.Entities.Model.Status", null)
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bug.Entities.Model.Workflow", null)
                        .WithMany()
                        .HasForeignKey("WorkflowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bug.Entities.Model.Account", b =>
                {
                    b.Navigation("CreatedProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
